
Deploying WordPress and MySQL with Persistent Volumes -Lab1 

1) lets create pv 

kubectl create -f https://raw.githubusercontent.com/MohanRamadoss/kubernetes/master/Kubernetesdemo/statefull/pv.yaml

2) pvc 
kubectl create -f https://raw.githubusercontent.com/MohanRamadoss/kubernetes/master/Kubernetesdemo/statefull/pvc.yaml


3) deploy the WordPress and MySQL


kubectl create -f https://raw.githubusercontent.com/MohanRamadoss/kubernetes/master/Kubernetesdemo/statefull/mysql-deployment.yaml










Deploying WordPress and MySQL with Persistent Volumes  using storeage configured



Create a Secret for MySQL Password

A Secret is an object that stores a piece of sensitive data like a password or key. The manifest files are already configured to use a Secret, but you have to create your own Secret.

    Create the Secret object from the following command. You will need to replace YOUR_PASSWORD with the password you want to use.

      kubectl create secret generic mysql-pass --from-literal=password=YOUR_PASSWORD

    Verify that the Secret exists by running the following command:

      kubectl get secrets

    The response should be like this:

      NAME                  TYPE                    DATA      AGE
      mysql-pass            Opaque                  1         42s

    Note: To protect the Secret from exposure, neither get nor describe show its contents.

Deploy MySQL

The following manifest describes a single-instance MySQL Deployment. The MySQL container mounts the PersistentVolume at /var/lib/mysql. The MYSQL_ROOT_PASSWORD environment variable sets the database password from the Secret.
mysql-deployment.yaml 

apiVersion: v1
kind: Service
metadata:
  name: wordpress-mysql
  labels:
    app: wordpress
spec:
  ports:
    - port: 3306
  selector:
    app: wordpress
    tier: mysql
  clusterIP: None
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim
  labels:
    app: wordpress
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
---
apiVersion: apps/v1 # for versions before 1.9.0 use apps/v1beta2
kind: Deployment
metadata:
  name: wordpress-mysql
  labels:
    app: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
      tier: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: wordpress
        tier: mysql
    spec:
      containers:
      - image: mysql:5.6
        name: mysql
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-pass
              key: password
        ports:
        - containerPort: 3306
          name: mysql
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pv-claim

    Deploy MySQL from the mysql-deployment.yaml file:

      kubectl create -f mysql-deployment.yaml

    Verify that a PersistentVolume got dynamically provisioned. Note that it can It can take up to a few minutes for the PVs to be provisioned and bound.

      kubectl get pvc

    The response should be like this:

      NAME             STATUS    VOLUME                                     CAPACITY ACCESS MODES   STORAGECLASS   AGE
      mysql-pv-claim   Bound     pvc-91e44fbf-d477-11e7-ac6a-42010a800002   20Gi     RWO            standard       29s

    Verify that the Pod is running by running the following command:

      kubectl get pods

        Note: It can take up to a few minutes for the Podâ€™s Status to be RUNNING.

    The response should be like this:

      NAME                               READY     STATUS    RESTARTS   AGE
      wordpress-mysql-1894417608-x5dzt   1/1       Running   0          40s

Deploy WordPress

The following manifest describes a single-instance WordPress Deployment and Service. It uses many of the same features like a PVC for persistent storage and a Secret for the password. But it also uses a different setting: type: LoadBalancer. 
This setting exposes WordPress to traffic from outside of the cluster.
wordpress-deployment.yaml 

apiVersion: v1
kind: Service
metadata:
  name: wordpress
  labels:
    app: wordpress
spec:
  ports:
    - port: 80
  selector:
    app: wordpress
    tier: frontend
  type: LoadBalancer
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: wp-pv-claim
  labels:
    app: wordpress
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
---
apiVersion: apps/v1 # for versions before 1.9.0 use apps/v1beta2
kind: Deployment
metadata:
  name: wordpress
  labels:
    app: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
      tier: frontend
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: wordpress
        tier: frontend
    spec:
      containers:
      - image: wordpress:4.8-apache
        name: wordpress
        env:
        - name: WORDPRESS_DB_HOST
          value: wordpress-mysql
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-pass
              key: password
        ports:
        - containerPort: 80
          name: wordpress
        volumeMounts:
        - name: wordpress-persistent-storage
          mountPath: /var/www/html
      volumes:
      - name: wordpress-persistent-storage
        persistentVolumeClaim:
          claimName: wp-pv-claim

    Create a WordPress Service and Deployment from the wordpress-deployment.yaml file:

      kubectl create -f wordpress-deployment.yaml

    Verify that a PersistentVolume got dynamically provisioned:

      kubectl get pvc

        Note: It can take up to a few minutes for the PVs to be provisioned and bound.

    The response should be like this:

      NAME             STATUS    VOLUME                                     CAPACITY ACCESS MODES   STORAGECLASS   AGE
      wp-pv-claim      Bound     pvc-e69d834d-d477-11e7-ac6a-42010a800002   20Gi     RWO            standard       7s

    Verify that the Service is running by running the following command:

      kubectl get services wordpress

    The response should be like this:

      NAME        TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)        AGE
      wordpress   ClusterIP   10.0.0.89    <pending>     80:32406/TCP   4m

        Note: Minikube can only expose Services through NodePort. The EXTERNAL-IP is always pending.

    Run the following command to get the IP Address for the WordPress Service:

      minikube service wordpress --url

    The response should be like this:

      http://1.2.3.4:32406

    Copy the IP address, and load the page in your browser to view your site.

You should see the WordPress set up page similar to the following screenshot.

wordpress-init

    Warning: Do not leave your WordPress installation on this page. If another user finds it, they can set up a website on your instance and use it to serve malicious content.

    Either install WordPress by creating a username and password or delete your instance.

Cleaning up

    Run the following command to delete your Secret:

      kubectl delete secret mysql-pass

    Run the following commands to delete all Deployments and Services:

      kubectl delete deployment -l app=wordpress
      kubectl delete service -l app=wordpress

    Run the following commands to delete the PersistentVolumeClaims. The dynamically provisioned PersistentVolumes will be automatically deleted.

      kubectl delete pvc -l app=wordpress

