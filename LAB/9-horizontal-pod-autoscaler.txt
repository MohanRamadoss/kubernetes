
Ensure High Availability and Uptime With Kubernetes Horizontal Pod Autoscaler and Prometheus

If in the first version of HPA you would need Heapster to provide CPU and memory metrics, 
in HPA v2 and Kubernetes 1.8 only the metrics server is required with the horizontal-pod-autoscaler-use-rest-clients switched on. 
The HPA rest client is enabled by default in Kubernetes 1.9. GKE 1.9 comes with the Metrics Server pre-installed. 

Deploy the Metrics Server in the kube-system namespace: 


kubectl create -f ./metrics-server



After one minute the metric-server starts reporting CPU and memory usage for nodes and pods. 
View nodes metrics: 
kubectl get --raw "/apis/metrics.k8s.io/v1beta1/nodes" 

View pods metrics: 
kubectl get --raw "/apis/metrics.k8s.io/v1beta1/pods" 



2. Auto Scaling based on CPU and memory usage

You will use a small Golang-based web app to test the Horizontal Pod Autoscaler (HPA). 

Deploy podinfo to the default namespace: 

kubectl create -f ./podinfo/podinfo-svc.yaml,./podinfo/podinfo-dep.yaml


 curl -s "http://10.111.177.150:9898/?[1-1000000]"
 
 
 
Access podinfo with the NodePort service at http://<K8S_PUBLIC_IP>:31198. 
Next define a HPA that maintains a minimum of two replicas and scales up to ten if the CPU average is over 80% or if the memory goes over 200Mi: 
apiVersion: autoscaling/v2beta1
kind: HorizontalPodAutoscaler
metadata:
  name: podinfo
spec:
  scaleTargetRef:
    apiVersion: extensions/v1beta1
    kind: Deployment
    name: podinfo
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      targetAverageUtilization: 80
  - type: Resource
    resource:
      name: memory
      targetAverageValue: 200Mi
	  
	  


Create the HPA: 
edit the hpa values 
kubectl create -f ./podinfo/podinfo-hpa.yaml
After a couple of seconds the HPA controller contacts the metrics server and then fetches the CPU and memory usage: 
kubectl get hpa
NAME      REFERENCE            TARGETS                      MINPODS   MAXPODS   REPLICAS   AGE
podinfo   Deployment/podinfo   2826240 / 200Mi, 15% / 80%   2         10        2          5m


In order to increase the CPU usage, run a load test 	  
	 
curl -s "http://10.96.206.201:9898/?[1-1000000]"
 	 
	 
	  