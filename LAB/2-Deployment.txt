

Deployment


Deployment execution
The command to execute Pod internally creates a Deployment object

kubectl create deployment nginx --image=nginx:1.7.12

Check the Deployment object created by the above command

kubectl get deployments nginx

###kubectl delete deployment nginx
 
 


###########How Deployment Works  Deployment ###########

scales ReplicaSet when Deployment under ReplicaSet is Scaled

kubectl scale deployments nginx --replicas=2
kubectl get replicasets -o wide 

By displaying the list of ReplicaSet it can be confirmed that it was scaled

kubectl get replicasets  


However, even if attempting to scale down ReplicaSet, scale down is not executed

kubectl scale deployments nginx --replicas=1
kubectl get replicasets -o wide 


This is because the Deployment is a top-level object under ReplicaSet control

Create Deployment
Save the Deployment created earlier in yml file on disk


kubectl get deployments nginx --export -o yaml > nginx-deployment.yml

nginx-deployments.yml  Looking at the contents of the ReplicaSet object is similar in content, but has a Strategy object that manages rollout in addition to managing Pod



Managing Deployment

Scale through the configuration file of the Deployment object as above

spec:
  progressDeadlineSeconds: 600
  replicas: 3
  revisionHistoryLimit: 10

  

spec:
  replicas: 3
  
  
kubectl apply -f nginx-deployment.yml

Confirm that you have scaled

kubectl get deployments nginx
Update the configuration file to update the container image


  containers:
  - image: nginx:1.9.10
    imagePullPolicy: Always
	
kubectl apply -f nginx-deployment.yml


Deleting Deployment

kubectl delete deployments nginx
kubectl delete -f nginx-deployment.yml



############################## kubectl edit (change definition information) / kubectl apply (change definition information)

kubectl edit (change definition information) / kubectl apply (change definition information)
Both edit and apply are used to modify resource definition information. The difference is as follows. 
- edit is used to change resource definition information using editor (vi etc.). 
- apply is used to change resource definition information from file or standard input.

Start Pod. Use image version 1.7.1

  
[root@master ~]# kubectl run nginx --image=nginx:1.7.1
deployment "nginx" created

Check the state of Pod.
[root@master ~]# kubectl get pod
NAME                     READY     STATUS    RESTARTS   AGE
nginx-4193804003-rqoun   1/1       Running   0          7s

Check the version number of the image. It is found to be 1.7.1.
[root@master ~]# kubectl describe pod nginx-4193804003-rqoun|grep "Image:"
    Image:              nginx:1.7.1

Change the version number of the image from 1.7.1 to 1.9.1.
[root@master ~]# kubectl edit deployment nginx

      - image: nginx:1.7.1
             ↓
      - image: nginx:1.9.1

deployment "nginx" edited

Check the state of Pod. Based on the 1.9.1 version image, you can see that Pod is running.
[root@master ~]# kubectl get pod
NAME                   READY     STATUS    RESTARTS   AGE
nginx-45047525-8tklr   1/1       Running   0          2m

[root@master ~]# kubectl describe pod nginx-45047525-8tklr |grep "Image:"
    Image:              nginx:1.9.1




======================================================
  kubectl create
==================================================
 
 The contents of the Deployment template file are as follows
 
 
cat <<EOF> nginx-deployment.yaml
> apiVersion: extensions/v1beta1
> kind: Deployment
> metadata:
>   name: nginx-deployment
> spec:
>   replicas: 1
>   template:
>     metadata:
>       labels:
>         app: nginx
>     spec:
>       containers:
>       - name: nginx
>         image: nginx:1.7.9
>         ports:
>         - containerPort: 80
> EOF




Create a Deployment with the template file name as an argument.

[root@master ~]#  kubectl create -f nginx-deployment.yaml
deployment.extensions/nginx-deployment created
[root@master ~]#

Check the state of the created Deployment. You can see that the name of Deployment is "nginx-deployment".


[root@master ~]#  kubectl get deployment
NAME               DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE
nginx              1         1         1            1           9m
nginx-deployment   1         1         1            1           53s
nginx1             1         1         1            1           8m
[root@master ~]#

Check the state of Pod.
[root@master ~]#  kubectl get pod
NAME                                READY     STATUS    RESTARTS   AGE
nginx-d75989cbf-jg6fv               1/1       Running   0          9m
nginx-deployment-67594d6bf6-6rhqz   1/1       Running   0          1m
nginx1-54bdd6bcc9-ts5cr             1/1       Running   0          8m
[root@master ~]#

Delete Deployment.

[root@master ~]# kubectl delete deployment nginx-deployment
deployment.extensions "nginx-deployment" deleted
[root@master ~]#


[root@master ~]#  kubectl get pod
NAME                                READY     STATUS        RESTARTS   AGE
nginx-d75989cbf-jg6fv               1/1       Running       0          10m
nginx-deployment-67594d6bf6-6rhqz   0/1       Terminating   0          1m
nginx1-54bdd6bcc9-ts5cr             1/1       Running       0          9m




##############kubectl replace (Replace resources, once deleting resources and recreating)

Check the version number of the image. Version number is 1.7.1



[root@master ~]# cat nginx-deployment.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: nginx-deployment
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:1.7.1
        ports:
        - containerPort: 80

		Start Pod.
[root@master ~]# kubectl create -f nginx-deployment.yaml
deployment "nginx-deployment" created

Check the state of Pod.
[root@master ~]# kubectl get pod
NAME                                READY     STATUS        RESTARTS   AGE
nginx-deployment-1406762891-5typw   1/1       Running       0          23s

Check the image version number of the Pod that started up.

[root@master ~]# kubectl get pod nginx-deployment-1406762891-5typw -o yaml|grep "image:"
  - image: nginx:1.7.1
    image: nginx:1.7.1

Change the image version number (1.7.1 -> 1.9.1).


[root@master ~]# vi nginx-deployment.yaml
[root@master ~]# cat nginx-deployment.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: nginx-deployment
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:1.9.1
        ports:
        - containerPort: 80
		


[root@master ~]# kubectl replace -f nginx-deployment.yaml
deployment "nginx-deployment" replaced

Check the state of Pod. I can see that the name of Pod has changed.

[root@master ~]# kubectl get pod
NAME                                READY   STATUS    RESTARTS   AGE
nginx-deployment-6987cdb55b-94l6l   1/1     Running   0          2s


Check the image version number of the Pod that started up.

[root@master ~]#  kubectl get pod nginx-deployment-6987cdb55b-94l6l -o yaml|grep "image:"
  - image: nginx:1.9.1
    image: docker.io/nginx:1.9.1
[root@master ~]#


Also check with the Docker command. It is understood that the version number of the image is 1.9.1.
[root@master ~]# docker ps
CONTAINER ID   IMAGE        COMMAND                  CREATED           STATUS           PORTS      NAMES
d6116aeec2e4   nginx:1.9.1  "nginx -g 'daemon off"   57 seconds ago    Up 55 seconds               k8s_nginx.f50b001f_nginx-deployment-1564180365-qplk2_default_7b606b07-a5a9-11e6-991f-000c291946c5_a8b717af3bde29fcacea





#############kubectl rolling-update (dynamically changing resources)



Check the content of the template. Image version number is 1.7.1
[root@master ~]# cat nginx-rc.yaml
apiVersion: v1
kind: ReplicationController
metadata:
  name: nginx
spec:
  replicas: 3
  selector:
    app: nginx
  template:
    metadata:
      name: nginx
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:1.7.1
        ports:
        - containerPort: 80

Start Pod.
[root@master ~]# kubectl create -f nginx-rc.yaml
replicationcontroller "nginx" created

Check the state of Pod.

[root@master ~]# kubectl get replicationcontrollers
NAME    DESIRED   CURRENT   READY   AGE
nginx   3         3         1       9s
[root@master ~]#





[root@master ~]# kubectl get pod
NAME          READY   STATUS    RESTARTS   AGE
nginx-bd87r   1/1     Running   0          11s

Check the version number of the image.

[root@master ~]# kubectl get pod nginx-bd87r -o yaml|grep "image:"
  - image: nginx:1.7.1
    image: docker.io/nginx:1.7.1

	
Perform rolling update. Update the version number of the image from 1.7.1 to 1.9.1.

[root@master ~]# kubectl rolling-update nginx --image=nginx:1.9.1
Command "rolling-update" is deprecated, use "rollout" instead
Created nginx-86575537a3a45a2d3cddf690f4565f19
Scaling up nginx-86575537a3a45a2d3cddf690f4565f19 from 0 to 1, scaling down nginx from 1 to 0 (keep 1 pods available, don't exceed 2 pods)
Scaling nginx-86575537a3a45a2d3cddf690f4565f19 up to 1


Scaling nginx down to 0
Update succeeded. Deleting old controller: nginx
Renaming nginx-86575537a3a45a2d3cddf690f4565f19 to nginx
replicationcontroller/nginx rolling updated



When "wait for a while", check the status of Pod on another terminal.
It is understood that two before Pod and a new Pod are activated.
[root@master ~]# kubectl get pod
NAME                                           READY     STATUS    RESTARTS   AGE
nginx-86575537a3a45a2d3cddf690f4565f19-vnwkl   1/1       Running   0          9s
nginx-bd87r                                    1/1       Running   0          11m

After rolling-update is finished, check the state of Pod. You can see that only the newly started Pod is running.
[root@master ~]# kubectl get pod
NAME                                           READY   STATUS    RESTARTS   AGE
nginx-86575537a3a45a2d3cddf690f4565f19-vnwkl   1/1     Running   0          13m
[root@master ~]#



[root@master ~]# kubectl get pod  nginx-634b1777dadd99cd2b89bb4c4b8c3eaa-r4rnf -o yaml|grep "image:"
  - image: nginx:1.9.1
    image: docker.io/nginx:1.9.1
	
	
[root@master ~]#kubectl delete replicationcontrollers nginx





##########################################
kubectl rollout
kubectl rollout history (Display update history)
kubectl rollout undo (Cancel the operation and return to the past state)

 
 
 
 Start Pod. To keep the history, attach the - record option.
[root@master ~]# kubectl run nginx --image=nginx:1.7.1 --record
deployment "nginx" created

Check the state of Pod.
[root@master master]# kubectl get pods
NAME                     READY   STATUS              RESTARTS   AGE
multiple-container       2/2     Running             0          50m
nginx-5688f79479-vph76   0/1     ContainerCreating   0          13s
mastertest              1/1     Running             0          75m
test-pod                 1/1     Running             1          64m


[root@master master]# kubectl rollout history deployment/nginx
deployment.extensions/nginx
REVISION  CHANGE-CAUSE
1         kubectl run nginx --image=nginx:1.7.1 --record=true

[root@master master]#



hange the image version number (1.7.1 -> 1.9.1). Since the editor (vi etc.) is activated, change the version number.
[root@master ~]# kubectl edit deployment nginx

      - image: nginx:1.7.1
           Change
      - image: nginx:1.9.1

deployment "nginx" edited

Confirm history.


  
  
[root@master master]#  kubectl get pod
NAME                     READY   STATUS    RESTARTS   AGE
multiple-container       2/2     Running   0          52m
nginx-55dcc6dd69-gd8qt   1/1     Running   0          68s
mastertest              1/1     Running   0          78m
test-pod                 1/1     Running   1          67m

  
  
  
[root@master master]# kubectl describe pod nginx-55dcc6dd69-gd8qt |grep "Image:"
    Image:          nginx:1.9.1
[root@master master]#

  [root@master master]# kubectl rollout history deployment nginx
deployment.extensions/nginx
REVISION  CHANGE-CAUSE
1         kubectl run nginx --image=nginx:1.7.1 --record=true
2         kubectl run nginx --image=nginx:1.7.1 --record=true

[root@master master]#


Return to REVISION 1 state.
[root@master master]# kubectl rollout undo deployment nginx --to-revision=1
deployment.extensions/nginx


[root@master master]# kubectl get pod
NAME                     READY   STATUS    RESTARTS   AGE
multiple-container       2/2     Running   0          55m
nginx-5688f79479-wgflc   1/1     Running   0          19s
mastertest              1/1     Running   0          80m
test-pod                 1/1     Running   1          70m



It is understood that the version number of the image has changed from 1.9.1 to 1.7.1.

[root@master master]# kubectl describe pod nginx-5688f79479-wgflc |grep "Image:"
    Image:          nginx:1.7.1
[root@master master]#







############################## kubectl edit (change definition information) / kubectl apply (change definition information)

kubectl edit (change definition information) / kubectl apply (change definition information)
Both edit and apply are used to modify resource definition information. The difference is as follows. 
- edit is used to change resource definition information using editor (vi etc.). 
- apply is used to change resource definition information from file or standard input.


  
[root@master ~]# kubectl run nginx --image=nginx:1.7.1
deployment "nginx" created

Check the state of Pod.
[root@master ~]# kubectl get pod
NAME                     READY     STATUS    RESTARTS   AGE
nginx-4193804003-rqoun   1/1       Running   0          7s

Check the version number of the image. It is found to be 1.7.1.
[root@master ~]# kubectl describe pod nginx-4193804003-rqoun|grep "Image:"
    Image:              nginx:1.7.1

Change the version number of the image from 1.7.1 to 1.9.1.
[root@master ~]# kubectl edit deployment nginx

      - image: nginx:1.7.1
             ↓
      - image: nginx:1.9.1

deployment "nginx" edited

Check the state of Pod. Based on the 1.9.1 version image, you can see that Pod is running.
[root@master ~]# kubectl get pod
NAME                   READY     STATUS    RESTARTS   AGE
nginx-45047525-8tklr   1/1       Running   0          2m

[root@master ~]# kubectl describe pod nginx-45047525-8tklr |grep "Image:"
    Image:              nginx:1.9.1

Also check with the docker command. The version number of the image has been updated to 1.9.1.
[root@master ~]# docker ps
CONTAINER ID     IMAGE          COMMAND                  CREATED              STATUS              PORTS        NAMES
007830b209b4     nginx:1.9.1    "nginx -g 'daemon off"   About a minute ago   Up About a minute      






